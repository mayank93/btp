def mergingFactor(pattern1,pattern2):
	"""return the merging factor at level l"""
	"""pattern1 is pattern at level l pattern2 is pattern at level l+1"""

	count1=len(pattern1)*1.0
	count2=len(pattern2)*1.0
	mf=(count1-1.0)/(count2-1.0)
	return mf


def levelFactor(h,l):
	"""return the level factor at level l"""
	
	lf=(2.0*(h-l))/( (h-1)*h)
	return lf


def adjustmentFactor(eub,eb):
	"""eub is number of edges for this pattern in unbalanced concept tree from l+1 to l  """
	"""eb is number of edges for this pattern in balanced concept tree from l+1 to l  """
	"""return the adjustment factor at level l"""
	
	af=(eub*1.0)/(eb*1.0)
	return af


def diverseRank(pattern,codeDictB,codeDictUb,height):
	patternUb=[]
	patternB=[]
	for i in x:
		patternUb.append(codeDictUb[i])
		patternB.append(codeDictB[i])

	patternB=set(patternB)
	patternUb=set(patternUb)

	dr=0
	level=height
	while len(patternB)>1:
		newPatternB=[]
		newPatternUb=[]
		level-=1
		maxPlus=0
		for i in patternUb:
			if maxPlus<i.count('+'):
				maxPlus=i.count('+')
		eub=0
        	for i in patternUb:
			index=i.rfind('+')
			if maxPlus==i.count('+'):
            			newPatternUb.append(i[:index])  
				eub+=1
			else:
            			newPatternUb.append(i)

        	for i in patternB:
			index=i.rfind('+')
            		newPatternB.append(i[:index])  
		eb=len(newPatternB)

		newPatternB=set(newPatternB)
		newPatternUb=set(newPatternUb)
		dr+=levelFactor(height,level)*mergingFactor(newPatternB,patternB)*adjustmentFactor(eub,eb)
		patternB=newPatternB
		patternUb=newPatternUb
	return dr
